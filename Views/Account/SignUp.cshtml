@using E_HealthCare_Web.ViewModels
@model E_HealthCare_Web.ViewModels.UserSignUpViewModel
@{
    ViewBag.Title = "SignUp";
}

@section Styles {
    <style type="text/css">
        .custom-font {
            font-family: 'Arial Rounded MT';
        }

        input.input-validation-error,
        textarea.input-validation-error,
        select.input-validation-error {
            border: 0.1px solid #CD0A0A99;
            box-shadow: 0 0 7px 0.2px #CD0A0A99;
        }
    </style>
}

<h2 class="custom-font">SignUp</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal custom-font">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @placeholder = "UserName", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PatientName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PatientName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Full Name", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.PatientName, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control CustomDatePicker", @placeholder = "30/12/2001", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        @{
            var GenderList = new List<UserSignUpViewModel>
{
                new UserSignUpViewModel { Gender = "Male" },
                new UserSignUpViewModel { Gender = "Female" },
                new UserSignUpViewModel { Gender = "Others"}
            };
        }


        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Gender, new SelectList(GenderList, "Gender", "Gender"), "Select Gender", htmlAttributes: new { @class = "form-control", style = "display:inliine;" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email Address", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2 " })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @placeholder = "Password", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger", style = "display:inline;" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @placeholder = "Confirm Password", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Register" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div class="col-md-offset-2 custom-font">
    Already have an Account? then @Html.ActionLink("Login", "Login")
</div>


@*<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />*@
@section scripts{
    @Scripts.Render("~/bundles/UnobtrusiveJquery")
    @*<script src="~/Scripts/jquery-ui-1.13.1.min.js"></script>
    <script src="~/Scripts/CustomeDate.js"></script>*@
}