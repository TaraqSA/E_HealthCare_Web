@using E_HealthCare_Web.ViewModels
@model E_HealthCare_Web.ViewModels.UserSignUpViewModel
@{
    ViewBag.Title = "SignUp";
}

@section Styles {
    <style type="text/css">
        .custom-font {
            font-family: 'Arial Rounded MT';
        }

        input.input-validation-error,
        textarea.input-validation-error,
        select.input-validation-error {
            border: 0.1px solid #CD0A0A99;
            box-shadow: 0 0 7px 0.2px #CD0A0A99;
        }
    </style>
}

<h2 class="custom-font">SignUp</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal custom-font">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @placeholder = "UserName", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email Address", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2 " })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @placeholder = "Password", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger", style = "display:inline;" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @placeholder = "Confirm Password", style = "display:inline;" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserRole, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" style="padding-top:4px;">
                <span>@Html.RadioButtonFor(model => model.UserRole, "Patient")&nbsp;Patient</span>&nbsp; &nbsp; &nbsp;
                <span>@Html.RadioButtonFor(model => model.UserRole, "Doctor")&nbsp;Doctor</span>                

                @Html.ValidationMessageFor(model => model.UserRole, "", new { @class = "text-danger", style = "display:inline;" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Register" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div class="col-md-offset-2 custom-font">
    Already have an Account? then @Html.ActionLink("Login", "Login")
</div>



@section scripts{
    @Scripts.Render("~/bundles/UnobtrusiveJquery")

}